// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Status represents the various cluster states.
type Status int32

const (
	// FAILED is the state when the cluster has failed in one way or another.
	Status_FAILED Status = 0
	// CREATING is the state when the cluster is being created.
	Status_CREATING Status = 1
	// READY is the state when the cluster is available and ready for use.
	Status_READY Status = 2
	// DESTROYING is the state when the cluster is being destroyed.
	Status_DESTROYING Status = 3
	// FINISHED is the state when the cluster has been successfully destroyed.
	Status_FINISHED Status = 4
)

var Status_name = map[int32]string{
	0: "FAILED",
	1: "CREATING",
	2: "READY",
	3: "DESTROYING",
	4: "FINISHED",
}

var Status_value = map[string]int32{
	"FAILED":     0,
	"CREATING":   1,
	"READY":      2,
	"DESTROYING": 3,
	"FINISHED":   4,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

// availability represents the availability classification levels.
type FlavorAvailability int32

const (
	// alpha is completely experemental, and is not expected to work in any way.
	Flavor_alpha FlavorAvailability = 0
	// beta is being tested, and is expected to work with minor issues.
	Flavor_beta FlavorAvailability = 1
	// stable is available for public consumption, and works without issue.
	Flavor_stable FlavorAvailability = 2
	// default is stable, and available for customer demo consumption.
	// Exactly 1 flavor should be configured as default.
	Flavor_default FlavorAvailability = 3
	// test are flavors for e2e and unit testing
	Flavor_test FlavorAvailability = 4
	// janitorDelete is for deleting clusters with the Infra Janitor.
	Flavor_janitorDelete FlavorAvailability = 5
)

var FlavorAvailability_name = map[int32]string{
	0: "alpha",
	1: "beta",
	2: "stable",
	3: "default",
	4: "test",
	5: "janitorDelete",
}

var FlavorAvailability_value = map[string]int32{
	"alpha":         0,
	"beta":          1,
	"stable":        2,
	"default":       3,
	"test":          4,
	"janitorDelete": 5,
}

func (x FlavorAvailability) String() string {
	return proto.EnumName(FlavorAvailability_name, int32(x))
}

func (FlavorAvailability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{8, 0}
}

// method represents the various lifespan operations.
type LifespanRequest_Method int32

const (
	// REPLACE indicates that the given lifespan should replace the current
	// lifespan.
	LifespanRequest_REPLACE LifespanRequest_Method = 0
	// ADD indicates that the given lifespan should be added to the current
	// lifespan.
	LifespanRequest_ADD LifespanRequest_Method = 1
	// SUBTRACT indicates that the given lifespan should be subtracted from
	// the current lifespan.
	LifespanRequest_SUBTRACT LifespanRequest_Method = 2
)

var LifespanRequest_Method_name = map[int32]string{
	0: "REPLACE",
	1: "ADD",
	2: "SUBTRACT",
}

var LifespanRequest_Method_value = map[string]int32{
	"REPLACE":  0,
	"ADD":      1,
	"SUBTRACT": 2,
}

func (x LifespanRequest_Method) String() string {
	return proto.EnumName(LifespanRequest_Method_name, int32(x))
}

func (LifespanRequest_Method) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{14, 0}
}

// ResourceByID represents a generic reference to a named/unique resource.
type ResourceByID struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceByID) Reset()         { *m = ResourceByID{} }
func (m *ResourceByID) String() string { return proto.CompactTextString(m) }
func (*ResourceByID) ProtoMessage()    {}
func (*ResourceByID) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *ResourceByID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceByID.Unmarshal(m, b)
}
func (m *ResourceByID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceByID.Marshal(b, m, deterministic)
}
func (m *ResourceByID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceByID.Merge(m, src)
}
func (m *ResourceByID) XXX_Size() int {
	return xxx_messageInfo_ResourceByID.Size(m)
}
func (m *ResourceByID) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceByID.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceByID proto.InternalMessageInfo

func (m *ResourceByID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Version struct {
	BuildDate            *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=BuildDate,proto3" json:"BuildDate,omitempty"`
	GitCommit            string                 `protobuf:"bytes,2,opt,name=GitCommit,proto3" json:"GitCommit,omitempty"`
	GoVersion            string                 `protobuf:"bytes,3,opt,name=GoVersion,proto3" json:"GoVersion,omitempty"`
	Platform             string                 `protobuf:"bytes,4,opt,name=Platform,proto3" json:"Platform,omitempty"`
	Version              string                 `protobuf:"bytes,5,opt,name=Version,proto3" json:"Version,omitempty"`
	Workflow             string                 `protobuf:"bytes,6,opt,name=Workflow,proto3" json:"Workflow,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Version) Reset()         { *m = Version{} }
func (m *Version) String() string { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()    {}
func (*Version) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *Version) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Version.Unmarshal(m, b)
}
func (m *Version) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Version.Marshal(b, m, deterministic)
}
func (m *Version) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Version.Merge(m, src)
}
func (m *Version) XXX_Size() int {
	return xxx_messageInfo_Version.Size(m)
}
func (m *Version) XXX_DiscardUnknown() {
	xxx_messageInfo_Version.DiscardUnknown(m)
}

var xxx_messageInfo_Version proto.InternalMessageInfo

func (m *Version) GetBuildDate() *timestamppb.Timestamp {
	if m != nil {
		return m.BuildDate
	}
	return nil
}

func (m *Version) GetGitCommit() string {
	if m != nil {
		return m.GitCommit
	}
	return ""
}

func (m *Version) GetGoVersion() string {
	if m != nil {
		return m.GoVersion
	}
	return ""
}

func (m *Version) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Version) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Version) GetWorkflow() string {
	if m != nil {
		return m.Workflow
	}
	return ""
}

// WhoamiResponse represents details about the current authenticated principal.
type WhoamiResponse struct {
	// Principal represents a possible type of authenticated principal.
	//
	// Types that are valid to be assigned to Principal:
	//
	//	*WhoamiResponse_User
	//	*WhoamiResponse_ServiceAccount
	Principal            isWhoamiResponse_Principal `protobuf_oneof:"principal"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *WhoamiResponse) Reset()         { *m = WhoamiResponse{} }
func (m *WhoamiResponse) String() string { return proto.CompactTextString(m) }
func (*WhoamiResponse) ProtoMessage()    {}
func (*WhoamiResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *WhoamiResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WhoamiResponse.Unmarshal(m, b)
}
func (m *WhoamiResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WhoamiResponse.Marshal(b, m, deterministic)
}
func (m *WhoamiResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhoamiResponse.Merge(m, src)
}
func (m *WhoamiResponse) XXX_Size() int {
	return xxx_messageInfo_WhoamiResponse.Size(m)
}
func (m *WhoamiResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WhoamiResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WhoamiResponse proto.InternalMessageInfo

type isWhoamiResponse_Principal interface {
	isWhoamiResponse_Principal()
}

type WhoamiResponse_User struct {
	User *User `protobuf:"bytes,1,opt,name=User,proto3,oneof"`
}

type WhoamiResponse_ServiceAccount struct {
	ServiceAccount *ServiceAccount `protobuf:"bytes,2,opt,name=ServiceAccount,proto3,oneof"`
}

func (*WhoamiResponse_User) isWhoamiResponse_Principal() {}

func (*WhoamiResponse_ServiceAccount) isWhoamiResponse_Principal() {}

func (m *WhoamiResponse) GetPrincipal() isWhoamiResponse_Principal {
	if m != nil {
		return m.Principal
	}
	return nil
}

func (m *WhoamiResponse) GetUser() *User {
	if x, ok := m.GetPrincipal().(*WhoamiResponse_User); ok {
		return x.User
	}
	return nil
}

func (m *WhoamiResponse) GetServiceAccount() *ServiceAccount {
	if x, ok := m.GetPrincipal().(*WhoamiResponse_ServiceAccount); ok {
		return x.ServiceAccount
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WhoamiResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WhoamiResponse_User)(nil),
		(*WhoamiResponse_ServiceAccount)(nil),
	}
}

// User represents an authenticated (human) principal.
type User struct {
	// Expiry is the expiration date of this user session. Used only as a hint
	// to the user and not for enforcement.
	Expiry *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=Expiry,proto3" json:"Expiry,omitempty"`
	// Name is the full name of the user.
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	// Email is the email address of the user.
	Email string `protobuf:"bytes,3,opt,name=Email,proto3" json:"Email,omitempty"`
	// Picture is a URL linking to this user's profile picture, if available.
	Picture              string   `protobuf:"bytes,4,opt,name=Picture,proto3" json:"Picture,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetExpiry() *timestamppb.Timestamp {
	if m != nil {
		return m.Expiry
	}
	return nil
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPicture() string {
	if m != nil {
		return m.Picture
	}
	return ""
}

// ServiceAccount represents an authenticated service account (robot) principal.
type ServiceAccount struct {
	// Name is a human readable name for the service account.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Description is a human readable description for the service account.
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	// Email is the Red Hat email address for the service account.
	Email string `protobuf:"bytes,3,opt,name=Email,proto3" json:"Email,omitempty"`
	// IssuedAt is the time of issuing the service account token.
	IssuedAt int64 `protobuf:"varint,4,opt,name=IssuedAt,proto3" json:"IssuedAt,omitempty"`
	// NotBefore is the beginning of service account token valid time period.
	NotBefore int64 `protobuf:"varint,5,opt,name=NotBefore,proto3" json:"NotBefore,omitempty"`
	// ExpiresAt is the end of service account token valid time period.
	ExpiresAt            int64    `protobuf:"varint,6,opt,name=ExpiresAt,proto3" json:"ExpiresAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceAccount) Reset()         { *m = ServiceAccount{} }
func (m *ServiceAccount) String() string { return proto.CompactTextString(m) }
func (*ServiceAccount) ProtoMessage()    {}
func (*ServiceAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{4}
}

func (m *ServiceAccount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceAccount.Unmarshal(m, b)
}
func (m *ServiceAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceAccount.Marshal(b, m, deterministic)
}
func (m *ServiceAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAccount.Merge(m, src)
}
func (m *ServiceAccount) XXX_Size() int {
	return xxx_messageInfo_ServiceAccount.Size(m)
}
func (m *ServiceAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAccount.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAccount proto.InternalMessageInfo

func (m *ServiceAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceAccount) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ServiceAccount) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ServiceAccount) GetIssuedAt() int64 {
	if m != nil {
		return m.IssuedAt
	}
	return 0
}

func (m *ServiceAccount) GetNotBefore() int64 {
	if m != nil {
		return m.NotBefore
	}
	return 0
}

func (m *ServiceAccount) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

type TokenResponse struct {
	// Account is the service account the token was generated for.
	Account *ServiceAccount `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
	// Token is the token generated for the service account.
	Token                string   `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenResponse) Reset()         { *m = TokenResponse{} }
func (m *TokenResponse) String() string { return proto.CompactTextString(m) }
func (*TokenResponse) ProtoMessage()    {}
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{5}
}

func (m *TokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenResponse.Unmarshal(m, b)
}
func (m *TokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenResponse.Marshal(b, m, deterministic)
}
func (m *TokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenResponse.Merge(m, src)
}
func (m *TokenResponse) XXX_Size() int {
	return xxx_messageInfo_TokenResponse.Size(m)
}
func (m *TokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TokenResponse proto.InternalMessageInfo

func (m *TokenResponse) GetAccount() *ServiceAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *TokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Parameter represents a single parameter that is needed to launch a flavor.
type Parameter struct {
	// Name is the unique name of the parameter.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Description is a human readable description for the parameter.
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	// Value that this parameter could have.
	// If the parameter is not optional, then value serves as an example.
	// If the parameter is optional, then value serves as a default.
	// If the parameter is internal, then value serves as a hardcoded constant.
	Value string `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
	// Optional indicates that this parameter can be optionally provided by a
	// user. If the user does not provide a value, then Value serves as a
	// default.
	Optional bool `protobuf:"varint,4,opt,name=Optional,proto3" json:"Optional,omitempty"`
	// Internal indicates that this parameter should not be provided by a user,
	// but rather treats Value as a hardcoded constant.
	Internal bool `protobuf:"varint,5,opt,name=Internal,proto3" json:"Internal,omitempty"`
	// The relative order of importance of this parameter for when presenting in
	// a UI for example.
	Order int32  `protobuf:"varint,6,opt,name=Order,proto3" json:"Order,omitempty"`
	Help  string `protobuf:"bytes,7,opt,name=Help,proto3" json:"Help,omitempty"`
	// Indicates that the value for this parameter can be provided from the
	// contents of a file.
	FromFile             bool     `protobuf:"varint,8,opt,name=FromFile,proto3" json:"FromFile,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Parameter) Reset()         { *m = Parameter{} }
func (m *Parameter) String() string { return proto.CompactTextString(m) }
func (*Parameter) ProtoMessage()    {}
func (*Parameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{6}
}

func (m *Parameter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Parameter.Unmarshal(m, b)
}
func (m *Parameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Parameter.Marshal(b, m, deterministic)
}
func (m *Parameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Parameter.Merge(m, src)
}
func (m *Parameter) XXX_Size() int {
	return xxx_messageInfo_Parameter.Size(m)
}
func (m *Parameter) XXX_DiscardUnknown() {
	xxx_messageInfo_Parameter.DiscardUnknown(m)
}

var xxx_messageInfo_Parameter proto.InternalMessageInfo

func (m *Parameter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Parameter) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Parameter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Parameter) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

func (m *Parameter) GetInternal() bool {
	if m != nil {
		return m.Internal
	}
	return false
}

func (m *Parameter) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *Parameter) GetHelp() string {
	if m != nil {
		return m.Help
	}
	return ""
}

func (m *Parameter) GetFromFile() bool {
	if m != nil {
		return m.FromFile
	}
	return false
}

// FlavorArtifact represents a single artifact that is produced by a flavor.
type FlavorArtifact struct {
	// Name is the unique name of the artifact.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Description is a human readable description for the artifact.
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	// Tags is a set of artifact tags.
	Tags                 map[string]*emptypb.Empty `protobuf:"bytes,3,rep,name=Tags,proto3" json:"Tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *FlavorArtifact) Reset()         { *m = FlavorArtifact{} }
func (m *FlavorArtifact) String() string { return proto.CompactTextString(m) }
func (*FlavorArtifact) ProtoMessage()    {}
func (*FlavorArtifact) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{7}
}

func (m *FlavorArtifact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlavorArtifact.Unmarshal(m, b)
}
func (m *FlavorArtifact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlavorArtifact.Marshal(b, m, deterministic)
}
func (m *FlavorArtifact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlavorArtifact.Merge(m, src)
}
func (m *FlavorArtifact) XXX_Size() int {
	return xxx_messageInfo_FlavorArtifact.Size(m)
}
func (m *FlavorArtifact) XXX_DiscardUnknown() {
	xxx_messageInfo_FlavorArtifact.DiscardUnknown(m)
}

var xxx_messageInfo_FlavorArtifact proto.InternalMessageInfo

func (m *FlavorArtifact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FlavorArtifact) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *FlavorArtifact) GetTags() map[string]*emptypb.Empty {
	if m != nil {
		return m.Tags
	}
	return nil
}

// Flavor represents a configured cluster flavor.
type Flavor struct {
	// ID is the unique, human type-able, ID for the flavor.
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Name is a human readable name for the flavor.
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	// Description is a human readable description for the flavor.
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	// Description is an availability classification for the flavor.
	Availability FlavorAvailability `protobuf:"varint,4,opt,name=Availability,proto3,enum=v1.FlavorAvailability" json:"Availability,omitempty"`
	// Parameters is a map of parameters required for launching this flavor.
	Parameters map[string]*Parameter `protobuf:"bytes,5,rep,name=Parameters,proto3" json:"Parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Artifacts is a map of artifacts produced by this flavor.
	Artifacts map[string]*FlavorArtifact `protobuf:"bytes,6,rep,name=Artifacts,proto3" json:"Artifacts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Aliases are alternative IDs of the flavor.
	Aliases              []string `protobuf:"bytes,7,rep,name=Aliases,proto3" json:"Aliases,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Flavor) Reset()         { *m = Flavor{} }
func (m *Flavor) String() string { return proto.CompactTextString(m) }
func (*Flavor) ProtoMessage()    {}
func (*Flavor) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{8}
}

func (m *Flavor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flavor.Unmarshal(m, b)
}
func (m *Flavor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flavor.Marshal(b, m, deterministic)
}
func (m *Flavor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flavor.Merge(m, src)
}
func (m *Flavor) XXX_Size() int {
	return xxx_messageInfo_Flavor.Size(m)
}
func (m *Flavor) XXX_DiscardUnknown() {
	xxx_messageInfo_Flavor.DiscardUnknown(m)
}

var xxx_messageInfo_Flavor proto.InternalMessageInfo

func (m *Flavor) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Flavor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Flavor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Flavor) GetAvailability() FlavorAvailability {
	if m != nil {
		return m.Availability
	}
	return Flavor_alpha
}

func (m *Flavor) GetParameters() map[string]*Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Flavor) GetArtifacts() map[string]*FlavorArtifact {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

func (m *Flavor) GetAliases() []string {
	if m != nil {
		return m.Aliases
	}
	return nil
}

// FlavorListRequest represents a request to FlavorService.List.
type FlavorListRequest struct {
	// all indicates that all flavors should be returned, by default
	// availability alpha clusters are excluded.
	All                  bool     `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlavorListRequest) Reset()         { *m = FlavorListRequest{} }
func (m *FlavorListRequest) String() string { return proto.CompactTextString(m) }
func (*FlavorListRequest) ProtoMessage()    {}
func (*FlavorListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{9}
}

func (m *FlavorListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlavorListRequest.Unmarshal(m, b)
}
func (m *FlavorListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlavorListRequest.Marshal(b, m, deterministic)
}
func (m *FlavorListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlavorListRequest.Merge(m, src)
}
func (m *FlavorListRequest) XXX_Size() int {
	return xxx_messageInfo_FlavorListRequest.Size(m)
}
func (m *FlavorListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FlavorListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FlavorListRequest proto.InternalMessageInfo

func (m *FlavorListRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

// FlavorListResponse represents details about the available cluster flavors.
type FlavorListResponse struct {
	// Default is the flavor ID of the default cluster flavor.
	Default string `protobuf:"bytes,1,opt,name=Default,proto3" json:"Default,omitempty"`
	// Flavors is a list of all available cluster flavors.
	Flavors              []*Flavor `protobuf:"bytes,2,rep,name=Flavors,proto3" json:"Flavors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *FlavorListResponse) Reset()         { *m = FlavorListResponse{} }
func (m *FlavorListResponse) String() string { return proto.CompactTextString(m) }
func (*FlavorListResponse) ProtoMessage()    {}
func (*FlavorListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{10}
}

func (m *FlavorListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlavorListResponse.Unmarshal(m, b)
}
func (m *FlavorListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlavorListResponse.Marshal(b, m, deterministic)
}
func (m *FlavorListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlavorListResponse.Merge(m, src)
}
func (m *FlavorListResponse) XXX_Size() int {
	return xxx_messageInfo_FlavorListResponse.Size(m)
}
func (m *FlavorListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FlavorListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FlavorListResponse proto.InternalMessageInfo

func (m *FlavorListResponse) GetDefault() string {
	if m != nil {
		return m.Default
	}
	return ""
}

func (m *FlavorListResponse) GetFlavors() []*Flavor {
	if m != nil {
		return m.Flavors
	}
	return nil
}

// Cluster represents a single cluster.
type Cluster struct {
	// ID is the unique ID for the cluster.
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Status is the current status for the cluster.
	Status Status `protobuf:"varint,2,opt,name=Status,proto3,enum=v1.Status" json:"Status,omitempty"`
	// Flavor is the original flavor ID that launched this cluster.
	Flavor string `protobuf:"bytes,3,opt,name=Flavor,proto3" json:"Flavor,omitempty"`
	// Owner is the email address for the cluster owner.
	Owner string `protobuf:"bytes,4,opt,name=Owner,proto3" json:"Owner,omitempty"`
	// CreatedOn is the timestamp on which the cluster started being created.
	CreatedOn *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=CreatedOn,proto3" json:"CreatedOn,omitempty"`
	// DestroyedOn is the timestamp on which the cluster finished being
	// destroyed.
	DestroyedOn *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=DestroyedOn,proto3" json:"DestroyedOn,omitempty"`
	// Lifespan is the duration for which the cluster should be kept alive.
	Lifespan *durationpb.Duration `protobuf:"bytes,7,opt,name=Lifespan,proto3" json:"Lifespan,omitempty"`
	// Description is a human readable description for the cluster.
	Description string `protobuf:"bytes,8,opt,name=Description,proto3" json:"Description,omitempty"`
	// URL is an optional URL for this cluster.
	URL string `protobuf:"bytes,9,opt,name=URL,proto3" json:"URL,omitempty"`
	// Connect is a command to add kube connection information to kubeconfig.
	Connect string `protobuf:"bytes,10,opt,name=Connect,proto3" json:"Connect,omitempty"`
	// Parameters is a list of options to configure the cluster creation.
	Parameters           []*Parameter `protobuf:"bytes,11,rep,name=Parameters,proto3" json:"Parameters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Cluster) Reset()         { *m = Cluster{} }
func (m *Cluster) String() string { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()    {}
func (*Cluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{11}
}

func (m *Cluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster.Unmarshal(m, b)
}
func (m *Cluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster.Marshal(b, m, deterministic)
}
func (m *Cluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster.Merge(m, src)
}
func (m *Cluster) XXX_Size() int {
	return xxx_messageInfo_Cluster.Size(m)
}
func (m *Cluster) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster proto.InternalMessageInfo

func (m *Cluster) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Cluster) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_FAILED
}

func (m *Cluster) GetFlavor() string {
	if m != nil {
		return m.Flavor
	}
	return ""
}

func (m *Cluster) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Cluster) GetCreatedOn() *timestamppb.Timestamp {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

func (m *Cluster) GetDestroyedOn() *timestamppb.Timestamp {
	if m != nil {
		return m.DestroyedOn
	}
	return nil
}

func (m *Cluster) GetLifespan() *durationpb.Duration {
	if m != nil {
		return m.Lifespan
	}
	return nil
}

func (m *Cluster) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Cluster) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *Cluster) GetConnect() string {
	if m != nil {
		return m.Connect
	}
	return ""
}

func (m *Cluster) GetParameters() []*Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// ClusterListRequest represents a request to ClusterService.List.
type ClusterListRequest struct {
	// all indicates that all clusters should be returned, not just the ones
	// owned by the user.
	All bool `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
	// expired indicates that expired clusters should be returned, not just the
	// ones that are launching/ready.
	Expired bool `protobuf:"varint,2,opt,name=expired,proto3" json:"expired,omitempty"`
	// list clusters whose ID matches this prefix.
	Prefix string `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// filter clusters whose Status is in the list
	AllowedStatuses []Status `protobuf:"varint,4,rep,packed,name=allowedStatuses,proto3,enum=v1.Status" json:"allowedStatuses,omitempty"`
	// filter clusters whose flavor ID is in the list
	AllowedFlavors       []string `protobuf:"bytes,5,rep,name=allowedFlavors,proto3" json:"allowedFlavors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterListRequest) Reset()         { *m = ClusterListRequest{} }
func (m *ClusterListRequest) String() string { return proto.CompactTextString(m) }
func (*ClusterListRequest) ProtoMessage()    {}
func (*ClusterListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{12}
}

func (m *ClusterListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterListRequest.Unmarshal(m, b)
}
func (m *ClusterListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterListRequest.Marshal(b, m, deterministic)
}
func (m *ClusterListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterListRequest.Merge(m, src)
}
func (m *ClusterListRequest) XXX_Size() int {
	return xxx_messageInfo_ClusterListRequest.Size(m)
}
func (m *ClusterListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterListRequest proto.InternalMessageInfo

func (m *ClusterListRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *ClusterListRequest) GetExpired() bool {
	if m != nil {
		return m.Expired
	}
	return false
}

func (m *ClusterListRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *ClusterListRequest) GetAllowedStatuses() []Status {
	if m != nil {
		return m.AllowedStatuses
	}
	return nil
}

func (m *ClusterListRequest) GetAllowedFlavors() []string {
	if m != nil {
		return m.AllowedFlavors
	}
	return nil
}

// ClusterListResponse represents details about all clusters.
type ClusterListResponse struct {
	// Clusters is a list of all clusters.
	Clusters             []*Cluster `protobuf:"bytes,1,rep,name=Clusters,proto3" json:"Clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ClusterListResponse) Reset()         { *m = ClusterListResponse{} }
func (m *ClusterListResponse) String() string { return proto.CompactTextString(m) }
func (*ClusterListResponse) ProtoMessage()    {}
func (*ClusterListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{13}
}

func (m *ClusterListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterListResponse.Unmarshal(m, b)
}
func (m *ClusterListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterListResponse.Marshal(b, m, deterministic)
}
func (m *ClusterListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterListResponse.Merge(m, src)
}
func (m *ClusterListResponse) XXX_Size() int {
	return xxx_messageInfo_ClusterListResponse.Size(m)
}
func (m *ClusterListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterListResponse proto.InternalMessageInfo

func (m *ClusterListResponse) GetClusters() []*Cluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

type LifespanRequest struct {
	// ID is the unique ID for the cluster.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Lifespan is the new lifespan.
	Lifespan             *durationpb.Duration   `protobuf:"bytes,2,opt,name=Lifespan,proto3" json:"Lifespan,omitempty"`
	Method               LifespanRequest_Method `protobuf:"varint,3,opt,name=method,proto3,enum=v1.LifespanRequest_Method" json:"method,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *LifespanRequest) Reset()         { *m = LifespanRequest{} }
func (m *LifespanRequest) String() string { return proto.CompactTextString(m) }
func (*LifespanRequest) ProtoMessage()    {}
func (*LifespanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{14}
}

func (m *LifespanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LifespanRequest.Unmarshal(m, b)
}
func (m *LifespanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LifespanRequest.Marshal(b, m, deterministic)
}
func (m *LifespanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LifespanRequest.Merge(m, src)
}
func (m *LifespanRequest) XXX_Size() int {
	return xxx_messageInfo_LifespanRequest.Size(m)
}
func (m *LifespanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LifespanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LifespanRequest proto.InternalMessageInfo

func (m *LifespanRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LifespanRequest) GetLifespan() *durationpb.Duration {
	if m != nil {
		return m.Lifespan
	}
	return nil
}

func (m *LifespanRequest) GetMethod() LifespanRequest_Method {
	if m != nil {
		return m.Method
	}
	return LifespanRequest_REPLACE
}

// CreateClusterRequest represents details for launching a new cluster.
type CreateClusterRequest struct {
	// ID is the flavor ID to launch.
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Lifespan is the initial cluster lifespan.
	Lifespan *durationpb.Duration `protobuf:"bytes,2,opt,name=Lifespan,proto3" json:"Lifespan,omitempty"`
	// Parameters is a map of launch parameter names to values.
	Parameters map[string]string `protobuf:"bytes,3,rep,name=Parameters,proto3" json:"Parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Description is a human readable description for the cluster.
	Description string `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	// NoSlack is used to skip sending Slack messages for cluster lifecycle
	// events.
	NoSlack bool `protobuf:"varint,5,opt,name=NoSlack,proto3" json:"NoSlack,omitempty"`
	// SlackDM is used to choose direct messages for cluster lifecycle
	// events.
	SlackDM              bool     `protobuf:"varint,6,opt,name=SlackDM,proto3" json:"SlackDM,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateClusterRequest) Reset()         { *m = CreateClusterRequest{} }
func (m *CreateClusterRequest) String() string { return proto.CompactTextString(m) }
func (*CreateClusterRequest) ProtoMessage()    {}
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{15}
}

func (m *CreateClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterRequest.Unmarshal(m, b)
}
func (m *CreateClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterRequest.Marshal(b, m, deterministic)
}
func (m *CreateClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterRequest.Merge(m, src)
}
func (m *CreateClusterRequest) XXX_Size() int {
	return xxx_messageInfo_CreateClusterRequest.Size(m)
}
func (m *CreateClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterRequest proto.InternalMessageInfo

func (m *CreateClusterRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *CreateClusterRequest) GetLifespan() *durationpb.Duration {
	if m != nil {
		return m.Lifespan
	}
	return nil
}

func (m *CreateClusterRequest) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *CreateClusterRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateClusterRequest) GetNoSlack() bool {
	if m != nil {
		return m.NoSlack
	}
	return false
}

func (m *CreateClusterRequest) GetSlackDM() bool {
	if m != nil {
		return m.SlackDM
	}
	return false
}

type Artifact struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	URL                  string   `protobuf:"bytes,3,opt,name=URL,proto3" json:"URL,omitempty"`
	Mode                 int32    `protobuf:"varint,4,opt,name=Mode,proto3" json:"Mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Artifact) Reset()         { *m = Artifact{} }
func (m *Artifact) String() string { return proto.CompactTextString(m) }
func (*Artifact) ProtoMessage()    {}
func (*Artifact) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{16}
}

func (m *Artifact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Artifact.Unmarshal(m, b)
}
func (m *Artifact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Artifact.Marshal(b, m, deterministic)
}
func (m *Artifact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Artifact.Merge(m, src)
}
func (m *Artifact) XXX_Size() int {
	return xxx_messageInfo_Artifact.Size(m)
}
func (m *Artifact) XXX_DiscardUnknown() {
	xxx_messageInfo_Artifact.DiscardUnknown(m)
}

var xxx_messageInfo_Artifact proto.InternalMessageInfo

func (m *Artifact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Artifact) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Artifact) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *Artifact) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

type ClusterArtifacts struct {
	Artifacts            []*Artifact `protobuf:"bytes,1,rep,name=Artifacts,proto3" json:"Artifacts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ClusterArtifacts) Reset()         { *m = ClusterArtifacts{} }
func (m *ClusterArtifacts) String() string { return proto.CompactTextString(m) }
func (*ClusterArtifacts) ProtoMessage()    {}
func (*ClusterArtifacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{17}
}

func (m *ClusterArtifacts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterArtifacts.Unmarshal(m, b)
}
func (m *ClusterArtifacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterArtifacts.Marshal(b, m, deterministic)
}
func (m *ClusterArtifacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterArtifacts.Merge(m, src)
}
func (m *ClusterArtifacts) XXX_Size() int {
	return xxx_messageInfo_ClusterArtifacts.Size(m)
}
func (m *ClusterArtifacts) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterArtifacts.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterArtifacts proto.InternalMessageInfo

func (m *ClusterArtifacts) GetArtifacts() []*Artifact {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

// Log represents the logs from a specific pod.
type Log struct {
	// Name is the name given to this pod in the workflow.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Started is the time at which this pod was started. Used for ordering
	// between pods.
	Started *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=Started,proto3" json:"Started,omitempty"`
	// Body is the raw pod logs.
	Body []byte `protobuf:"bytes,3,opt,name=Body,proto3" json:"Body,omitempty"`
	// Message surfaces step state from Argo.
	Message              string   `protobuf:"bytes,4,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{18}
}

func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Log) GetStarted() *timestamppb.Timestamp {
	if m != nil {
		return m.Started
	}
	return nil
}

func (m *Log) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Log) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// LogsResponse represents a collection of logs.
type LogsResponse struct {
	// Logs are all of the logs from a cluster.
	Logs                 []*Log   `protobuf:"bytes,1,rep,name=Logs,proto3" json:"Logs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogsResponse) Reset()         { *m = LogsResponse{} }
func (m *LogsResponse) String() string { return proto.CompactTextString(m) }
func (*LogsResponse) ProtoMessage()    {}
func (*LogsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{19}
}

func (m *LogsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogsResponse.Unmarshal(m, b)
}
func (m *LogsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogsResponse.Marshal(b, m, deterministic)
}
func (m *LogsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogsResponse.Merge(m, src)
}
func (m *LogsResponse) XXX_Size() int {
	return xxx_messageInfo_LogsResponse.Size(m)
}
func (m *LogsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogsResponse proto.InternalMessageInfo

func (m *LogsResponse) GetLogs() []*Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

type CliUpgradeRequest struct {
	Os                   string   `protobuf:"bytes,1,opt,name=os,proto3" json:"os,omitempty"`
	Arch                 string   `protobuf:"bytes,2,opt,name=arch,proto3" json:"arch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CliUpgradeRequest) Reset()         { *m = CliUpgradeRequest{} }
func (m *CliUpgradeRequest) String() string { return proto.CompactTextString(m) }
func (*CliUpgradeRequest) ProtoMessage()    {}
func (*CliUpgradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{20}
}

func (m *CliUpgradeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CliUpgradeRequest.Unmarshal(m, b)
}
func (m *CliUpgradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CliUpgradeRequest.Marshal(b, m, deterministic)
}
func (m *CliUpgradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CliUpgradeRequest.Merge(m, src)
}
func (m *CliUpgradeRequest) XXX_Size() int {
	return xxx_messageInfo_CliUpgradeRequest.Size(m)
}
func (m *CliUpgradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CliUpgradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CliUpgradeRequest proto.InternalMessageInfo

func (m *CliUpgradeRequest) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *CliUpgradeRequest) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

type CliUpgradeResponse struct {
	FileChunk            []byte   `protobuf:"bytes,1,opt,name=fileChunk,proto3" json:"fileChunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CliUpgradeResponse) Reset()         { *m = CliUpgradeResponse{} }
func (m *CliUpgradeResponse) String() string { return proto.CompactTextString(m) }
func (*CliUpgradeResponse) ProtoMessage()    {}
func (*CliUpgradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{21}
}

func (m *CliUpgradeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CliUpgradeResponse.Unmarshal(m, b)
}
func (m *CliUpgradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CliUpgradeResponse.Marshal(b, m, deterministic)
}
func (m *CliUpgradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CliUpgradeResponse.Merge(m, src)
}
func (m *CliUpgradeResponse) XXX_Size() int {
	return xxx_messageInfo_CliUpgradeResponse.Size(m)
}
func (m *CliUpgradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CliUpgradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CliUpgradeResponse proto.InternalMessageInfo

func (m *CliUpgradeResponse) GetFileChunk() []byte {
	if m != nil {
		return m.FileChunk
	}
	return nil
}

type InfraStatus struct {
	// MaintenanceActive is an indicator whether a maintenance is ongoing.
	MaintenanceActive bool `protobuf:"varint,1,opt,name=MaintenanceActive,proto3" json:"MaintenanceActive,omitempty"`
	// Maintainer is the email of the person currently doing maintenance.
	Maintainer           string   `protobuf:"bytes,2,opt,name=Maintainer,proto3" json:"Maintainer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfraStatus) Reset()         { *m = InfraStatus{} }
func (m *InfraStatus) String() string { return proto.CompactTextString(m) }
func (*InfraStatus) ProtoMessage()    {}
func (*InfraStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{22}
}

func (m *InfraStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfraStatus.Unmarshal(m, b)
}
func (m *InfraStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfraStatus.Marshal(b, m, deterministic)
}
func (m *InfraStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfraStatus.Merge(m, src)
}
func (m *InfraStatus) XXX_Size() int {
	return xxx_messageInfo_InfraStatus.Size(m)
}
func (m *InfraStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_InfraStatus.DiscardUnknown(m)
}

var xxx_messageInfo_InfraStatus proto.InternalMessageInfo

func (m *InfraStatus) GetMaintenanceActive() bool {
	if m != nil {
		return m.MaintenanceActive
	}
	return false
}

func (m *InfraStatus) GetMaintainer() string {
	if m != nil {
		return m.Maintainer
	}
	return ""
}

func init() {
	proto.RegisterEnum("v1.Status", Status_name, Status_value)
	proto.RegisterEnum("v1.FlavorAvailability", FlavorAvailability_name, FlavorAvailability_value)
	proto.RegisterEnum("v1.LifespanRequest_Method", LifespanRequest_Method_name, LifespanRequest_Method_value)
	proto.RegisterType((*ResourceByID)(nil), "v1.ResourceByID")
	proto.RegisterType((*Version)(nil), "v1.Version")
	proto.RegisterType((*WhoamiResponse)(nil), "v1.WhoamiResponse")
	proto.RegisterType((*User)(nil), "v1.User")
	proto.RegisterType((*ServiceAccount)(nil), "v1.ServiceAccount")
	proto.RegisterType((*TokenResponse)(nil), "v1.TokenResponse")
	proto.RegisterType((*Parameter)(nil), "v1.Parameter")
	proto.RegisterType((*FlavorArtifact)(nil), "v1.FlavorArtifact")
	proto.RegisterMapType((map[string]*emptypb.Empty)(nil), "v1.FlavorArtifact.TagsEntry")
	proto.RegisterType((*Flavor)(nil), "v1.Flavor")
	proto.RegisterMapType((map[string]*FlavorArtifact)(nil), "v1.Flavor.ArtifactsEntry")
	proto.RegisterMapType((map[string]*Parameter)(nil), "v1.Flavor.ParametersEntry")
	proto.RegisterType((*FlavorListRequest)(nil), "v1.FlavorListRequest")
	proto.RegisterType((*FlavorListResponse)(nil), "v1.FlavorListResponse")
	proto.RegisterType((*Cluster)(nil), "v1.Cluster")
	proto.RegisterType((*ClusterListRequest)(nil), "v1.ClusterListRequest")
	proto.RegisterType((*ClusterListResponse)(nil), "v1.ClusterListResponse")
	proto.RegisterType((*LifespanRequest)(nil), "v1.LifespanRequest")
	proto.RegisterType((*CreateClusterRequest)(nil), "v1.CreateClusterRequest")
	proto.RegisterMapType((map[string]string)(nil), "v1.CreateClusterRequest.ParametersEntry")
	proto.RegisterType((*Artifact)(nil), "v1.Artifact")
	proto.RegisterType((*ClusterArtifacts)(nil), "v1.ClusterArtifacts")
	proto.RegisterType((*Log)(nil), "v1.Log")
	proto.RegisterType((*LogsResponse)(nil), "v1.LogsResponse")
	proto.RegisterType((*CliUpgradeRequest)(nil), "v1.CliUpgradeRequest")
	proto.RegisterType((*CliUpgradeResponse)(nil), "v1.CliUpgradeResponse")
	proto.RegisterType((*InfraStatus)(nil), "v1.InfraStatus")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 1955 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xdb, 0x72, 0x1b, 0x49,
	0xf9, 0xf7, 0xe8, 0xac, 0x4f, 0xb6, 0x3c, 0xee, 0x38, 0xce, 0xac, 0xe2, 0xf5, 0xdf, 0xd5, 0xbb,
	0x7f, 0x48, 0x99, 0xac, 0xb5, 0x11, 0x4b, 0xed, 0x56, 0xd8, 0x5d, 0x4a, 0x96, 0xe4, 0x58, 0x20,
	0x1f, 0x18, 0xdb, 0x1b, 0x02, 0x17, 0xd0, 0x96, 0x5a, 0xf6, 0xe0, 0xd1, 0xb4, 0x98, 0x69, 0x29,
	0xeb, 0x4a, 0x85, 0x0b, 0x5e, 0x81, 0xa2, 0x28, 0xde, 0x83, 0xe2, 0x82, 0xe2, 0x86, 0x4b, 0x2e,
	0x29, 0x8a, 0x37, 0xe0, 0x96, 0x3b, 0x1e, 0x80, 0xea, 0xc3, 0x1c, 0x34, 0x92, 0xb2, 0xa9, 0x70,
	0x37, 0xdf, 0xa1, 0x7f, 0x5f, 0x7f, 0xe7, 0x1e, 0x58, 0x0b, 0xa8, 0x3f, 0x75, 0xfa, 0x74, 0x7f,
	0xec, 0x33, 0xce, 0x50, 0x66, 0xfa, 0xa4, 0xb6, 0x7d, 0xcd, 0xd8, 0xb5, 0x4b, 0xeb, 0x64, 0xec,
	0xd4, 0x89, 0xe7, 0x31, 0x4e, 0xb8, 0xc3, 0xbc, 0x40, 0x69, 0xd4, 0x76, 0xb4, 0x54, 0x52, 0x57,
	0x93, 0x61, 0x7d, 0x30, 0xf1, 0xa5, 0x82, 0x96, 0x3f, 0x4c, 0xcb, 0xe9, 0x68, 0xcc, 0xef, 0xb4,
	0xf0, 0xff, 0xd2, 0x42, 0xee, 0x8c, 0x68, 0xc0, 0xc9, 0x68, 0xac, 0x14, 0xf0, 0x0e, 0xac, 0xda,
	0x34, 0x60, 0x13, 0xbf, 0x4f, 0x0f, 0xee, 0xba, 0x6d, 0x54, 0x85, 0x8c, 0x33, 0xb0, 0x8c, 0x5d,
	0xe3, 0x51, 0xd9, 0xce, 0x38, 0x03, 0xfc, 0x77, 0x03, 0x8a, 0x5f, 0x51, 0x3f, 0x70, 0x98, 0x87,
	0x3e, 0x83, 0xf2, 0xc1, 0xc4, 0x71, 0x07, 0x6d, 0xc2, 0xa9, 0x54, 0xa9, 0x34, 0x6a, 0xfb, 0xca,
	0xc0, 0x7e, 0x68, 0x60, 0xff, 0x22, 0x34, 0x60, 0xc7, 0xca, 0x68, 0x1b, 0xca, 0xcf, 0x1c, 0xde,
	0x62, 0xa3, 0x91, 0xc3, 0xad, 0x8c, 0x04, 0x8f, 0x19, 0x52, 0xca, 0xb4, 0x11, 0x2b, 0xab, 0xa5,
	0x21, 0x03, 0xd5, 0xa0, 0x74, 0xe6, 0x12, 0x3e, 0x64, 0xfe, 0xc8, 0xca, 0x49, 0x61, 0x44, 0x23,
	0x2b, 0xba, 0x9c, 0x95, 0x97, 0xa2, 0x62, 0xe2, 0xd4, 0x73, 0xe6, 0xdf, 0x0e, 0x5d, 0xf6, 0xd2,
	0x2a, 0xa8, 0x53, 0x21, 0x8d, 0x5f, 0x41, 0xf5, 0xf9, 0x0d, 0x23, 0x23, 0xc7, 0xa6, 0xc1, 0x98,
	0x79, 0x01, 0x45, 0x3b, 0x90, 0xbb, 0x0c, 0xa8, 0xaf, 0x9d, 0x2a, 0xed, 0x4f, 0x9f, 0xec, 0x0b,
	0xfa, 0x68, 0xc5, 0x96, 0x7c, 0xf4, 0x39, 0x54, 0xcf, 0x55, 0xda, 0x9a, 0xfd, 0x3e, 0x9b, 0x78,
	0xca, 0x89, 0x4a, 0x03, 0x09, 0xcd, 0x59, 0xc9, 0xd1, 0x8a, 0x9d, 0xd2, 0x3d, 0xa8, 0x40, 0x79,
	0xec, 0x3b, 0x5e, 0xdf, 0x19, 0x13, 0x17, 0xff, 0x5a, 0x99, 0x42, 0x0d, 0x28, 0x74, 0xbe, 0x1e,
	0x3b, 0xfe, 0xdd, 0x5b, 0x44, 0x52, 0x6b, 0x22, 0x04, 0xb9, 0x13, 0x32, 0xa2, 0x3a, 0x82, 0xf2,
	0x1b, 0x6d, 0x42, 0xbe, 0x33, 0x22, 0x8e, 0xab, 0x03, 0xa7, 0x08, 0x11, 0x98, 0x33, 0xa7, 0xcf,
	0x27, 0x3e, 0xd5, 0x31, 0x0b, 0x49, 0xfc, 0x47, 0x23, 0xed, 0x4b, 0x04, 0x6b, 0x24, 0x60, 0x77,
	0xa1, 0xd2, 0xa6, 0x41, 0xdf, 0x77, 0xc6, 0xa2, 0xd4, 0xb4, 0xc5, 0x24, 0x6b, 0x89, 0xe1, 0x1a,
	0x94, 0xba, 0x41, 0x30, 0xa1, 0x83, 0x26, 0x97, 0x96, 0xb3, 0x76, 0x44, 0x8b, 0x3c, 0x9f, 0x30,
	0x7e, 0x40, 0x87, 0xcc, 0xa7, 0x32, 0x5f, 0x59, 0x3b, 0x66, 0x08, 0xa9, 0x74, 0x93, 0x06, 0x4d,
	0x2e, 0x53, 0x96, 0xb5, 0x63, 0x06, 0x3e, 0x87, 0xb5, 0x0b, 0x76, 0x4b, 0xbd, 0x28, 0x65, 0x8f,
	0xa1, 0x18, 0xe6, 0xc2, 0x58, 0x96, 0x0b, 0x3b, 0x54, 0x11, 0x97, 0x95, 0xc7, 0xb5, 0x23, 0x8a,
	0xc0, 0xff, 0x34, 0xa0, 0x7c, 0x46, 0x7c, 0x32, 0xa2, 0x9c, 0xfa, 0xef, 0x1e, 0x86, 0xaf, 0x88,
	0x3b, 0xa1, 0x61, 0x18, 0x24, 0x21, 0xc2, 0x70, 0x2a, 0xe5, 0xc4, 0x95, 0x61, 0x28, 0xd9, 0x11,
	0x2d, 0x43, 0xe4, 0x71, 0xea, 0x0b, 0x59, 0x5e, 0xc9, 0x42, 0x5a, 0xa0, 0x9d, 0xfa, 0x03, 0xea,
	0xcb, 0x00, 0xe4, 0x6d, 0x45, 0x88, 0x9b, 0x1d, 0x51, 0x77, 0x6c, 0x15, 0xd5, 0xcd, 0xc4, 0xb7,
	0x40, 0x39, 0xf4, 0xd9, 0xe8, 0xd0, 0x71, 0xa9, 0x55, 0x52, 0x28, 0x21, 0x8d, 0xff, 0x66, 0x40,
	0xf5, 0xd0, 0x25, 0x53, 0xe6, 0x37, 0x7d, 0xee, 0x0c, 0x49, 0xff, 0x5d, 0x73, 0xfc, 0x31, 0xe4,
	0x2e, 0xc8, 0x75, 0x60, 0x65, 0x77, 0xb3, 0x8f, 0x2a, 0x8d, 0x6d, 0x11, 0xe1, 0x59, 0xdc, 0x7d,
	0x21, 0xee, 0x78, 0xdc, 0xbf, 0xb3, 0xa5, 0x66, 0xed, 0x14, 0xca, 0x11, 0x0b, 0x99, 0x90, 0xbd,
	0xa5, 0x77, 0xda, 0xa6, 0xf8, 0x44, 0x8f, 0x21, 0x3f, 0x95, 0xd1, 0x52, 0xfd, 0xb3, 0x35, 0x57,
	0xf4, 0x1d, 0x31, 0xbc, 0x6c, 0xa5, 0xf4, 0x34, 0xf3, 0x99, 0x81, 0x7f, 0x97, 0x83, 0x82, 0xb2,
	0x29, 0x66, 0x53, 0xb7, 0x1d, 0xce, 0xa6, 0x6e, 0x7b, 0x61, 0x3b, 0xa4, 0x7c, 0xca, 0xce, 0xfb,
	0xf4, 0x7d, 0x58, 0x6d, 0x4e, 0x89, 0xe3, 0x92, 0x2b, 0xc7, 0x75, 0xf8, 0x9d, 0x4c, 0x4f, 0xb5,
	0xf1, 0x20, 0xf6, 0x6d, 0x9f, 0x24, 0xc4, 0xf6, 0x8c, 0x32, 0x7a, 0x0a, 0x10, 0x15, 0x4c, 0x60,
	0xe5, 0x65, 0x58, 0x6a, 0x89, 0xa3, 0xb1, 0x50, 0x05, 0x25, 0xa1, 0x8d, 0x3e, 0x85, 0x72, 0x18,
	0xb6, 0xc0, 0x2a, 0xc8, 0xa3, 0xef, 0x25, 0x8e, 0x46, 0x32, 0x75, 0x32, 0xd6, 0x15, 0xcd, 0xdc,
	0x74, 0x1d, 0x12, 0xd0, 0xc0, 0x2a, 0xee, 0x66, 0x45, 0x33, 0x6b, 0xb2, 0xd6, 0x83, 0xf5, 0x94,
	0xc5, 0x05, 0x31, 0xff, 0x60, 0x36, 0xe6, 0x6b, 0xc2, 0x66, 0x74, 0x2a, 0x11, 0xea, 0xda, 0x19,
	0x54, 0x67, 0x2f, 0xb1, 0x00, 0xec, 0xd1, 0x2c, 0x18, 0x9a, 0x2f, 0x89, 0x64, 0xf2, 0x5e, 0xc0,
	0x6a, 0x32, 0x98, 0xa8, 0x0c, 0x79, 0xe2, 0x8e, 0x6f, 0x88, 0xb9, 0x82, 0x4a, 0x90, 0xbb, 0xa2,
	0x9c, 0x98, 0x06, 0x02, 0x28, 0x04, 0x9c, 0x5c, 0xb9, 0xd4, 0xcc, 0xa0, 0x0a, 0x14, 0x07, 0x74,
	0x48, 0x26, 0x2e, 0x37, 0xb3, 0x42, 0x85, 0xd3, 0x80, 0x9b, 0x39, 0xb4, 0x01, 0x6b, 0xbf, 0x24,
	0x9e, 0xc3, 0x99, 0xdf, 0xa6, 0x2e, 0xe5, 0xd4, 0xcc, 0xe3, 0xff, 0x87, 0x0d, 0x65, 0xb7, 0xe7,
	0x04, 0xdc, 0xa6, 0xbf, 0x9a, 0xd0, 0x80, 0x8b, 0xfb, 0x12, 0xd7, 0x95, 0xf7, 0x2d, 0xd9, 0xe2,
	0x13, 0x5f, 0x00, 0x4a, 0xaa, 0xe9, 0xe1, 0x61, 0x41, 0xb1, 0xad, 0xcc, 0x68, 0xdf, 0x42, 0x12,
	0x7d, 0x08, 0x45, 0xa5, 0x1f, 0x58, 0x19, 0x99, 0x22, 0x88, 0x3d, 0xb4, 0x43, 0x11, 0xfe, 0x7d,
	0x16, 0x8a, 0x2d, 0x77, 0x12, 0x88, 0xb1, 0x91, 0xae, 0x4a, 0x0c, 0x85, 0x73, 0x4e, 0xf8, 0x24,
	0x90, 0x21, 0xaa, 0x2a, 0x00, 0xc5, 0xb1, 0xb5, 0x04, 0x6d, 0x85, 0x35, 0xad, 0x0b, 0x34, 0xac,
	0x70, 0xd1, 0xfe, 0x2f, 0x3d, 0xea, 0xeb, 0xa1, 0xad, 0x08, 0xb1, 0x77, 0x5b, 0x3e, 0x25, 0x9c,
	0x0e, 0x4e, 0xd5, 0x9e, 0xfb, 0x86, 0xbd, 0x1b, 0x29, 0xa3, 0xcf, 0x65, 0x37, 0x70, 0x9f, 0xdd,
	0xc9, 0xb3, 0x85, 0x6f, 0x3c, 0x9b, 0x54, 0x47, 0xdf, 0x83, 0x52, 0xcf, 0x19, 0xd2, 0x60, 0x4c,
	0x3c, 0x39, 0x7a, 0x44, 0xbd, 0xa6, 0x8f, 0xb6, 0xf5, 0x63, 0xc4, 0x8e, 0x54, 0xd3, 0x2d, 0x58,
	0x9a, 0x6f, 0x41, 0x13, 0xb2, 0x97, 0x76, 0xcf, 0x2a, 0xab, 0xb2, 0xba, 0xb4, 0x7b, 0x22, 0x21,
	0x2d, 0xe6, 0x79, 0xb4, 0xcf, 0x2d, 0x50, 0x09, 0xd1, 0x24, 0xfa, 0x68, 0xa6, 0xe3, 0x2a, 0x32,
	0x27, 0xa9, 0x12, 0x4e, 0x28, 0xe0, 0x3f, 0x19, 0x80, 0x74, 0x66, 0xde, 0x58, 0x18, 0xc2, 0x22,
	0x95, 0xdb, 0x65, 0x20, 0xf3, 0x54, 0xb2, 0x43, 0x52, 0x24, 0x67, 0xec, 0xd3, 0xa1, 0xf3, 0x75,
	0x98, 0x1c, 0x45, 0xa1, 0x4f, 0x60, 0x9d, 0xb8, 0x2e, 0x7b, 0x49, 0x07, 0x2a, 0x8b, 0x34, 0xb0,
	0x72, 0xbb, 0xd9, 0x54, 0x86, 0xd3, 0x2a, 0xe8, 0x5b, 0x50, 0xd5, 0xac, 0xb0, 0xae, 0xf2, 0xb2,
	0x87, 0x53, 0x5c, 0xfc, 0x25, 0xdc, 0x9b, 0xb9, 0xb7, 0xae, 0xd4, 0x6f, 0x43, 0x49, 0xb3, 0x03,
	0xcb, 0x90, 0xce, 0x57, 0x84, 0x35, 0xcd, 0xb3, 0x23, 0x21, 0xfe, 0xb3, 0x01, 0xeb, 0x61, 0x0a,
	0x42, 0xaf, 0x53, 0x8f, 0xb9, 0x99, 0x84, 0x66, 0xde, 0x3e, 0xa1, 0x0d, 0x28, 0x8c, 0x28, 0xbf,
	0x61, 0x03, 0x19, 0x90, 0xaa, 0x1a, 0x78, 0x29, 0x5b, 0xfb, 0xc7, 0x52, 0xc3, 0xd6, 0x9a, 0xf8,
	0x31, 0x14, 0x14, 0x47, 0xb4, 0xb4, 0xdd, 0x39, 0xeb, 0x35, 0x5b, 0x1d, 0x73, 0x05, 0x15, 0x21,
	0xdb, 0x6c, 0xb7, 0x4d, 0x03, 0xad, 0x42, 0xe9, 0xfc, 0xf2, 0xe0, 0xc2, 0x6e, 0xb6, 0x2e, 0xcc,
	0x0c, 0xfe, 0x4b, 0x06, 0x36, 0x55, 0xd5, 0x86, 0x8e, 0xc5, 0x1e, 0xcc, 0x34, 0xd7, 0x3b, 0x7a,
	0x70, 0x34, 0x53, 0x44, 0x6a, 0x9b, 0x3d, 0x92, 0x71, 0x5c, 0x60, 0xf4, 0x8d, 0x43, 0x3c, 0x55,
	0xdc, 0xb9, 0xf9, 0xe2, 0xb6, 0xa0, 0x78, 0xc2, 0xce, 0x5d, 0xd2, 0xbf, 0xd5, 0xdb, 0x3d, 0x24,
	0x85, 0x44, 0x7e, 0xb4, 0x8f, 0x65, 0x27, 0x96, 0xec, 0x90, 0xac, 0x7d, 0xf1, 0x36, 0x73, 0x7c,
	0x33, 0x39, 0x7a, 0xcb, 0xc9, 0x31, 0x3b, 0x84, 0xd2, 0xff, 0xb8, 0xe8, 0x75, 0x47, 0x66, 0xe3,
	0x8e, 0x44, 0x90, 0x3b, 0x66, 0x03, 0xf5, 0x7c, 0xcc, 0xdb, 0xf2, 0x1b, 0x7f, 0x09, 0xa6, 0x0e,
	0x55, 0xbc, 0x9c, 0xf6, 0x92, 0x5b, 0x4d, 0x55, 0xe8, 0xaa, 0x88, 0x6c, 0xb4, 0x0e, 0x62, 0x31,
	0x7e, 0x0d, 0xd9, 0x1e, 0xbb, 0x5e, 0x78, 0xc5, 0x4f, 0xa0, 0x78, 0xce, 0x89, 0xcf, 0x75, 0x3b,
	0xbe, 0x79, 0x4a, 0x85, 0xaa, 0x02, 0xe9, 0x80, 0x0d, 0xee, 0xe4, 0xbd, 0x57, 0x6d, 0xf9, 0x2d,
	0xa2, 0x7c, 0x4c, 0x83, 0x80, 0x5c, 0x47, 0x4f, 0x5f, 0x4d, 0xe2, 0xef, 0xc0, 0x6a, 0x8f, 0x5d,
	0x07, 0x51, 0x6f, 0x3d, 0x84, 0x9c, 0xa0, 0xf5, 0xad, 0x8b, 0xb2, 0xaa, 0xd9, 0xb5, 0x2d, 0x99,
	0xf8, 0x53, 0xd8, 0x68, 0xb9, 0xce, 0xe5, 0xf8, 0xda, 0x27, 0x03, 0x9a, 0x28, 0x47, 0x16, 0x84,
	0xe5, 0xc8, 0x02, 0x61, 0x9f, 0xf8, 0xfd, 0x9b, 0xf0, 0x05, 0x22, 0xbe, 0x71, 0x43, 0x0c, 0xa0,
	0xf8, 0xa0, 0xb6, 0xb5, 0x0d, 0xe5, 0xa1, 0xe3, 0xd2, 0xd6, 0xcd, 0xc4, 0xbb, 0x95, 0x00, 0xab,
	0x76, 0xcc, 0xc0, 0x3f, 0x83, 0x4a, 0xd7, 0x1b, 0xfa, 0x44, 0xaf, 0x87, 0xc7, 0xb0, 0x71, 0x4c,
	0x1c, 0x8f, 0x53, 0x8f, 0x78, 0xe2, 0x31, 0xcb, 0x9d, 0x29, 0xd5, 0xb3, 0x6b, 0x5e, 0x80, 0x76,
	0x00, 0x24, 0x93, 0x38, 0x62, 0x73, 0xa8, 0xab, 0x24, 0x38, 0x7b, 0x3f, 0x0a, 0x17, 0x92, 0xd8,
	0xb4, 0x87, 0xcd, 0x6e, 0xaf, 0xd3, 0x36, 0x57, 0x44, 0x03, 0xb6, 0xec, 0x4e, 0xf3, 0xa2, 0x7b,
	0xf2, 0xcc, 0x34, 0xc4, 0x62, 0xb6, 0x3b, 0xcd, 0xf6, 0x0b, 0x33, 0x83, 0xaa, 0x00, 0xed, 0xce,
	0xf9, 0x85, 0x7d, 0xfa, 0x42, 0x88, 0xb2, 0x42, 0xf1, 0xb0, 0x7b, 0xd2, 0x3d, 0x3f, 0xea, 0xb4,
	0xcd, 0x5c, 0xe3, 0x27, 0x50, 0xd5, 0xbf, 0x58, 0xfa, 0xa9, 0x8d, 0x0e, 0x01, 0x9e, 0x51, 0x1e,
	0xfe, 0x77, 0x2d, 0x79, 0xd1, 0xd5, 0xe4, 0xd4, 0xd2, 0x4a, 0xf8, 0xde, 0x6f, 0xfe, 0xf1, 0xaf,
	0xdf, 0x66, 0xd6, 0x50, 0xa5, 0x3e, 0x7d, 0x52, 0x9f, 0x2a, 0x66, 0xe3, 0x3f, 0x06, 0x54, 0xc4,
	0x9f, 0x51, 0x88, 0x7b, 0x04, 0x05, 0xf5, 0x97, 0xb6, 0x14, 0x53, 0x3e, 0x3e, 0x66, 0xff, 0xe4,
	0x30, 0x92, 0xd0, 0xab, 0x08, 0x04, 0xf4, 0x4b, 0x75, 0xfe, 0xc7, 0x50, 0x51, 0x7d, 0x2e, 0x5f,
	0xfd, 0x68, 0xc1, 0x8f, 0x42, 0x6d, 0x43, 0xf0, 0x66, 0x7e, 0x30, 0xf0, 0x43, 0x89, 0x74, 0x1f,
	0x9b, 0x02, 0x89, 0x0b, 0xd1, 0x47, 0x7d, 0x89, 0xf2, 0xd4, 0xd8, 0x43, 0x47, 0xfa, 0x7f, 0x62,
	0xe9, 0xdd, 0x16, 0x00, 0x6e, 0x4a, 0xc0, 0x2a, 0x2e, 0x47, 0x80, 0x4f, 0x8d, 0xbd, 0xc6, 0x1f,
	0x0c, 0x58, 0x53, 0x3b, 0x20, 0x74, 0xbc, 0x0b, 0x39, 0xb1, 0x02, 0xd0, 0xfd, 0xf8, 0xe5, 0x91,
	0x58, 0x65, 0xb5, 0xad, 0x34, 0x7b, 0x91, 0xe7, 0x43, 0xf5, 0x9e, 0xf8, 0x02, 0x72, 0x5d, 0x6f,
	0xc8, 0x90, 0x29, 0xce, 0x24, 0xff, 0xf3, 0x6b, 0x89, 0x67, 0x0d, 0x7e, 0x20, 0x4f, 0x6e, 0xa0,
	0xf5, 0xf8, 0x64, 0xfd, 0x95, 0x33, 0x78, 0xdd, 0xf8, 0x6b, 0x0e, 0xaa, 0xba, 0xe1, 0xc3, 0xcb,
	0xfd, 0x60, 0x29, 0x62, 0x72, 0x2f, 0x61, 0x4b, 0x42, 0x22, 0x24, 0x83, 0xd7, 0x57, 0x4c, 0x89,
	0x89, 0x7a, 0xda, 0xbb, 0xad, 0x84, 0x7a, 0xd2, 0xbd, 0x07, 0x73, 0x7c, 0xed, 0xdf, 0x4c, 0xd1,
	0x68, 0x48, 0xf4, 0x8b, 0x78, 0x1f, 0xa0, 0x7b, 0x0b, 0xd6, 0x52, 0x6d, 0xf9, 0x7a, 0xc0, 0x1f,
	0x4a, 0xc0, 0x1d, 0xfc, 0x5e, 0xfa, 0x8e, 0x75, 0x57, 0x83, 0x88, 0x4c, 0xf7, 0xa0, 0xa0, 0x8a,
	0x07, 0x59, 0xcb, 0x16, 0x46, 0x6d, 0x2e, 0x18, 0x78, 0x4b, 0x62, 0x9b, 0x38, 0x79, 0x59, 0x81,
	0xf6, 0x3c, 0x31, 0x2d, 0x17, 0xc4, 0x70, 0x33, 0xe1, 0x7c, 0x3c, 0x36, 0xb1, 0x04, 0xdb, 0x46,
	0xb5, 0xb9, 0x8b, 0x92, 0x08, 0xab, 0x07, 0x05, 0xf5, 0x34, 0x5e, 0x80, 0xba, 0xa4, 0x46, 0xc3,
	0x24, 0xed, 0xcd, 0x27, 0xa9, 0xab, 0x26, 0xe3, 0x02, 0x2c, 0x53, 0x4f, 0xc9, 0x68, 0x8a, 0xe2,
	0xf7, 0x25, 0xca, 0x03, 0x74, 0x7f, 0x3e, 0x8c, 0xec, 0x3a, 0x68, 0x8c, 0x00, 0x5a, 0xae, 0x13,
	0x96, 0xcf, 0xcf, 0xa1, 0xa8, 0x27, 0xa3, 0x2a, 0xef, 0xb9, 0x11, 0x5b, 0xdb, 0x4a, 0xb3, 0xb5,
	0x99, 0x0f, 0xa4, 0x99, 0xf7, 0xd1, 0x43, 0x65, 0xc6, 0xa9, 0xbf, 0x62, 0xc1, 0xeb, 0xfa, 0x2b,
	0x31, 0x72, 0x5f, 0xd7, 0x27, 0x4a, 0xf9, 0x63, 0xa3, 0xf1, 0x6f, 0x03, 0x50, 0x62, 0x94, 0xc6,
	0xc3, 0xa4, 0xfc, 0x8c, 0xf2, 0xf0, 0xf5, 0xbd, 0xa4, 0x67, 0xd7, 0x85, 0xe9, 0xc4, 0xe1, 0xd9,
	0x96, 0x0a, 0xd4, 0xe1, 0x1f, 0x42, 0xc5, 0xa6, 0xc1, 0x3b, 0x63, 0xed, 0x25, 0xb1, 0x9a, 0x50,
	0x3e, 0x8f, 0x90, 0xd2, 0x27, 0x96, 0x42, 0xd4, 0x12, 0x10, 0x07, 0xb9, 0x9f, 0x66, 0xa6, 0x4f,
	0xae, 0x0a, 0xd2, 0xfa, 0x77, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xde, 0x85, 0x3b, 0xb5, 0x5d,
	0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VersionServiceClient is the client API for VersionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VersionServiceClient interface {
	GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Version, error)
}

type versionServiceClient struct {
	cc *grpc.ClientConn
}

func NewVersionServiceClient(cc *grpc.ClientConn) VersionServiceClient {
	return &versionServiceClient{cc}
}

func (c *versionServiceClient) GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/v1.VersionService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VersionServiceServer is the server API for VersionService service.
type VersionServiceServer interface {
	GetVersion(context.Context, *emptypb.Empty) (*Version, error)
}

// UnimplementedVersionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVersionServiceServer struct {
}

func (*UnimplementedVersionServiceServer) GetVersion(ctx context.Context, req *emptypb.Empty) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}

func RegisterVersionServiceServer(s *grpc.Server, srv VersionServiceServer) {
	s.RegisterService(&_VersionService_serviceDesc, srv)
}

func _VersionService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VersionService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServiceServer).GetVersion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.VersionService",
	HandlerType: (*VersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _VersionService_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	// Whoami provides information about the currently authenticated principal.
	Whoami(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WhoamiResponse, error)
	// CreateToken generates an arbitrary service account token
	CreateToken(ctx context.Context, in *ServiceAccount, opts ...grpc.CallOption) (*TokenResponse, error)
	// Token generates a service account token for the current user.
	Token(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TokenResponse, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Whoami(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WhoamiResponse, error) {
	out := new(WhoamiResponse)
	err := c.cc.Invoke(ctx, "/v1.UserService/Whoami", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateToken(ctx context.Context, in *ServiceAccount, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/v1.UserService/CreateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Token(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/v1.UserService/Token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	// Whoami provides information about the currently authenticated principal.
	Whoami(context.Context, *emptypb.Empty) (*WhoamiResponse, error)
	// CreateToken generates an arbitrary service account token
	CreateToken(context.Context, *ServiceAccount) (*TokenResponse, error)
	// Token generates a service account token for the current user.
	Token(context.Context, *emptypb.Empty) (*TokenResponse, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) Whoami(ctx context.Context, req *emptypb.Empty) (*WhoamiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whoami not implemented")
}
func (*UnimplementedUserServiceServer) CreateToken(ctx context.Context, req *ServiceAccount) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (*UnimplementedUserServiceServer) Token(ctx context.Context, req *emptypb.Empty) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Whoami_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Whoami(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/Whoami",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Whoami(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateToken(ctx, req.(*ServiceAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Token(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Whoami",
			Handler:    _UserService_Whoami_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _UserService_CreateToken_Handler,
		},
		{
			MethodName: "Token",
			Handler:    _UserService_Token_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// FlavorServiceClient is the client API for FlavorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlavorServiceClient interface {
	// List provides information about the available flavors.
	List(ctx context.Context, in *FlavorListRequest, opts ...grpc.CallOption) (*FlavorListResponse, error)
	// Info provides information about a specific flavor.
	Info(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Flavor, error)
}

type flavorServiceClient struct {
	cc *grpc.ClientConn
}

func NewFlavorServiceClient(cc *grpc.ClientConn) FlavorServiceClient {
	return &flavorServiceClient{cc}
}

func (c *flavorServiceClient) List(ctx context.Context, in *FlavorListRequest, opts ...grpc.CallOption) (*FlavorListResponse, error) {
	out := new(FlavorListResponse)
	err := c.cc.Invoke(ctx, "/v1.FlavorService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flavorServiceClient) Info(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Flavor, error) {
	out := new(Flavor)
	err := c.cc.Invoke(ctx, "/v1.FlavorService/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlavorServiceServer is the server API for FlavorService service.
type FlavorServiceServer interface {
	// List provides information about the available flavors.
	List(context.Context, *FlavorListRequest) (*FlavorListResponse, error)
	// Info provides information about a specific flavor.
	Info(context.Context, *ResourceByID) (*Flavor, error)
}

// UnimplementedFlavorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFlavorServiceServer struct {
}

func (*UnimplementedFlavorServiceServer) List(ctx context.Context, req *FlavorListRequest) (*FlavorListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedFlavorServiceServer) Info(ctx context.Context, req *ResourceByID) (*Flavor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}

func RegisterFlavorServiceServer(s *grpc.Server, srv FlavorServiceServer) {
	s.RegisterService(&_FlavorService_serviceDesc, srv)
}

func _FlavorService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlavorListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlavorServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FlavorService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlavorServiceServer).List(ctx, req.(*FlavorListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlavorService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlavorServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FlavorService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlavorServiceServer).Info(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlavorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.FlavorService",
	HandlerType: (*FlavorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _FlavorService_List_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _FlavorService_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ClusterServiceClient is the client API for ClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterServiceClient interface {
	// Info provides information about a specific cluster.
	Info(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Cluster, error)
	// List provides information about the available clusters.
	List(ctx context.Context, in *ClusterListRequest, opts ...grpc.CallOption) (*ClusterListResponse, error)
	// Lifespan updates the lifespan for a specific cluster.
	Lifespan(ctx context.Context, in *LifespanRequest, opts ...grpc.CallOption) (*durationpb.Duration, error)
	// Create launches a new cluster.
	Create(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*ResourceByID, error)
	// Artifacts returns the artifacts for a specific cluster.
	Artifacts(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ClusterArtifacts, error)
	// Delete deletes an existing cluster.
	Delete(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Logs returns the logs for a specific cluster.
	Logs(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*LogsResponse, error)
}

type clusterServiceClient struct {
	cc *grpc.ClientConn
}

func NewClusterServiceClient(cc *grpc.ClientConn) ClusterServiceClient {
	return &clusterServiceClient{cc}
}

func (c *clusterServiceClient) Info(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, "/v1.ClusterService/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) List(ctx context.Context, in *ClusterListRequest, opts ...grpc.CallOption) (*ClusterListResponse, error) {
	out := new(ClusterListResponse)
	err := c.cc.Invoke(ctx, "/v1.ClusterService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Lifespan(ctx context.Context, in *LifespanRequest, opts ...grpc.CallOption) (*durationpb.Duration, error) {
	out := new(durationpb.Duration)
	err := c.cc.Invoke(ctx, "/v1.ClusterService/Lifespan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Create(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*ResourceByID, error) {
	out := new(ResourceByID)
	err := c.cc.Invoke(ctx, "/v1.ClusterService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Artifacts(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*ClusterArtifacts, error) {
	out := new(ClusterArtifacts)
	err := c.cc.Invoke(ctx, "/v1.ClusterService/Artifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Delete(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/v1.ClusterService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) Logs(ctx context.Context, in *ResourceByID, opts ...grpc.CallOption) (*LogsResponse, error) {
	out := new(LogsResponse)
	err := c.cc.Invoke(ctx, "/v1.ClusterService/Logs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServiceServer is the server API for ClusterService service.
type ClusterServiceServer interface {
	// Info provides information about a specific cluster.
	Info(context.Context, *ResourceByID) (*Cluster, error)
	// List provides information about the available clusters.
	List(context.Context, *ClusterListRequest) (*ClusterListResponse, error)
	// Lifespan updates the lifespan for a specific cluster.
	Lifespan(context.Context, *LifespanRequest) (*durationpb.Duration, error)
	// Create launches a new cluster.
	Create(context.Context, *CreateClusterRequest) (*ResourceByID, error)
	// Artifacts returns the artifacts for a specific cluster.
	Artifacts(context.Context, *ResourceByID) (*ClusterArtifacts, error)
	// Delete deletes an existing cluster.
	Delete(context.Context, *ResourceByID) (*emptypb.Empty, error)
	// Logs returns the logs for a specific cluster.
	Logs(context.Context, *ResourceByID) (*LogsResponse, error)
}

// UnimplementedClusterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedClusterServiceServer struct {
}

func (*UnimplementedClusterServiceServer) Info(ctx context.Context, req *ResourceByID) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedClusterServiceServer) List(ctx context.Context, req *ClusterListRequest) (*ClusterListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedClusterServiceServer) Lifespan(ctx context.Context, req *LifespanRequest) (*durationpb.Duration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lifespan not implemented")
}
func (*UnimplementedClusterServiceServer) Create(ctx context.Context, req *CreateClusterRequest) (*ResourceByID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedClusterServiceServer) Artifacts(ctx context.Context, req *ResourceByID) (*ClusterArtifacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Artifacts not implemented")
}
func (*UnimplementedClusterServiceServer) Delete(ctx context.Context, req *ResourceByID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedClusterServiceServer) Logs(ctx context.Context, req *ResourceByID) (*LogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logs not implemented")
}

func RegisterClusterServiceServer(s *grpc.Server, srv ClusterServiceServer) {
	s.RegisterService(&_ClusterService_serviceDesc, srv)
}

func _ClusterService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ClusterService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Info(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ClusterService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).List(ctx, req.(*ClusterListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Lifespan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifespanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Lifespan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ClusterService/Lifespan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Lifespan(ctx, req.(*LifespanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ClusterService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Create(ctx, req.(*CreateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Artifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Artifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ClusterService/Artifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Artifacts(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ClusterService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Delete(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_Logs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).Logs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ClusterService/Logs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).Logs(ctx, req.(*ResourceByID))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ClusterService",
	HandlerType: (*ClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _ClusterService_Info_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ClusterService_List_Handler,
		},
		{
			MethodName: "Lifespan",
			Handler:    _ClusterService_Lifespan_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ClusterService_Create_Handler,
		},
		{
			MethodName: "Artifacts",
			Handler:    _ClusterService_Artifacts_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ClusterService_Delete_Handler,
		},
		{
			MethodName: "Logs",
			Handler:    _ClusterService_Logs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// CliServiceClient is the client API for CliService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CliServiceClient interface {
	// Upgrade - gets an updated binary if it exists.
	Upgrade(ctx context.Context, in *CliUpgradeRequest, opts ...grpc.CallOption) (CliService_UpgradeClient, error)
}

type cliServiceClient struct {
	cc *grpc.ClientConn
}

func NewCliServiceClient(cc *grpc.ClientConn) CliServiceClient {
	return &cliServiceClient{cc}
}

func (c *cliServiceClient) Upgrade(ctx context.Context, in *CliUpgradeRequest, opts ...grpc.CallOption) (CliService_UpgradeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CliService_serviceDesc.Streams[0], "/v1.CliService/Upgrade", opts...)
	if err != nil {
		return nil, err
	}
	x := &cliServiceUpgradeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CliService_UpgradeClient interface {
	Recv() (*CliUpgradeResponse, error)
	grpc.ClientStream
}

type cliServiceUpgradeClient struct {
	grpc.ClientStream
}

func (x *cliServiceUpgradeClient) Recv() (*CliUpgradeResponse, error) {
	m := new(CliUpgradeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CliServiceServer is the server API for CliService service.
type CliServiceServer interface {
	// Upgrade - gets an updated binary if it exists.
	Upgrade(*CliUpgradeRequest, CliService_UpgradeServer) error
}

// UnimplementedCliServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCliServiceServer struct {
}

func (*UnimplementedCliServiceServer) Upgrade(req *CliUpgradeRequest, srv CliService_UpgradeServer) error {
	return status.Errorf(codes.Unimplemented, "method Upgrade not implemented")
}

func RegisterCliServiceServer(s *grpc.Server, srv CliServiceServer) {
	s.RegisterService(&_CliService_serviceDesc, srv)
}

func _CliService_Upgrade_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CliUpgradeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CliServiceServer).Upgrade(m, &cliServiceUpgradeServer{stream})
}

type CliService_UpgradeServer interface {
	Send(*CliUpgradeResponse) error
	grpc.ServerStream
}

type cliServiceUpgradeServer struct {
	grpc.ServerStream
}

func (x *cliServiceUpgradeServer) Send(m *CliUpgradeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _CliService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CliService",
	HandlerType: (*CliServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upgrade",
			Handler:       _CliService_Upgrade_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

// InfraStatusServiceClient is the client API for InfraStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfraStatusServiceClient interface {
	// GetStatus gets the maintenance
	GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InfraStatus, error)
	// ResetStatus resets the maintenance
	ResetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InfraStatus, error)
	// SetStatus sets the maintenance
	SetStatus(ctx context.Context, in *InfraStatus, opts ...grpc.CallOption) (*InfraStatus, error)
}

type infraStatusServiceClient struct {
	cc *grpc.ClientConn
}

func NewInfraStatusServiceClient(cc *grpc.ClientConn) InfraStatusServiceClient {
	return &infraStatusServiceClient{cc}
}

func (c *infraStatusServiceClient) GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InfraStatus, error) {
	out := new(InfraStatus)
	err := c.cc.Invoke(ctx, "/v1.InfraStatusService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraStatusServiceClient) ResetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InfraStatus, error) {
	out := new(InfraStatus)
	err := c.cc.Invoke(ctx, "/v1.InfraStatusService/ResetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraStatusServiceClient) SetStatus(ctx context.Context, in *InfraStatus, opts ...grpc.CallOption) (*InfraStatus, error) {
	out := new(InfraStatus)
	err := c.cc.Invoke(ctx, "/v1.InfraStatusService/SetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfraStatusServiceServer is the server API for InfraStatusService service.
type InfraStatusServiceServer interface {
	// GetStatus gets the maintenance
	GetStatus(context.Context, *emptypb.Empty) (*InfraStatus, error)
	// ResetStatus resets the maintenance
	ResetStatus(context.Context, *emptypb.Empty) (*InfraStatus, error)
	// SetStatus sets the maintenance
	SetStatus(context.Context, *InfraStatus) (*InfraStatus, error)
}

// UnimplementedInfraStatusServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInfraStatusServiceServer struct {
}

func (*UnimplementedInfraStatusServiceServer) GetStatus(ctx context.Context, req *emptypb.Empty) (*InfraStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedInfraStatusServiceServer) ResetStatus(ctx context.Context, req *emptypb.Empty) (*InfraStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetStatus not implemented")
}
func (*UnimplementedInfraStatusServiceServer) SetStatus(ctx context.Context, req *InfraStatus) (*InfraStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatus not implemented")
}

func RegisterInfraStatusServiceServer(s *grpc.Server, srv InfraStatusServiceServer) {
	s.RegisterService(&_InfraStatusService_serviceDesc, srv)
}

func _InfraStatusService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraStatusServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.InfraStatusService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraStatusServiceServer).GetStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraStatusService_ResetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraStatusServiceServer).ResetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.InfraStatusService/ResetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraStatusServiceServer).ResetStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraStatusService_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfraStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraStatusServiceServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.InfraStatusService/SetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraStatusServiceServer).SetStatus(ctx, req.(*InfraStatus))
	}
	return interceptor(ctx, in, info, handler)
}

var _InfraStatusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.InfraStatusService",
	HandlerType: (*InfraStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _InfraStatusService_GetStatus_Handler,
		},
		{
			MethodName: "ResetStatus",
			Handler:    _InfraStatusService_ResetStatus_Handler,
		},
		{
			MethodName: "SetStatus",
			Handler:    _InfraStatusService_SetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
