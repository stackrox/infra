apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: openshift-4-demo-
spec:
  entrypoint: start
  arguments:
    parameters:
      - name: name
      - name: openshift-version
        value: ""
      - name: master-node-count
        value: ""
      - name: worker-node-count
        value: ""
      - name: region
        value: ""
      - name: pull-secret
        value: ""
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Mi
  volumes:
    - name: credentials
      secret:
        secretName: google-credentials-openshift-4
    - name: demo-secrets
      secret:
        secretName: demo-secrets

  templates:
    - name: start
      steps:
        - - name: create
            template: create

        - - name: gen-creds
            template: gen-creds

        - - name: run-ansible-demo
            template: run-ansible-demo
            arguments:
              artifacts:
                - name: mypassword
                  from: "{{steps.gen-creds.outputs.artifacts.stackrox-admin-password}}"
#               - name: kubeconfig
#                 from: "{{steps.create.outputs.artifacts.kubeconfig}}"

        #- - name: wait
        #template: wait

        - - name: destroy
            template: destroy

    - name: create
      container:
        image: gcr.io/stackrox-infra/automation-flavors/openshift-4:0.2.7-5-ga00dce9a61-snapshot
        imagePullPolicy: Always
        volumeMounts:
          - name: data
            mountPath: /data
        args:
          - create
          - "{{workflow.parameters.name}}"
          - srox-temp-dev-test
          - openshift.infra.rox.systems
        env:
          - name: GOOGLE_CREDENTIALS
            valueFrom:
              secretKeyRef:
                name: google-credentials-openshift-4
                key: google-credentials.json
          - name: PULL_SECRET
            valueFrom:
              secretKeyRef:
                name: redhat-pull-secret
                key: REDHAT_PULL_SECRET
          - name: USER_PULL_SECRET
            value: "{{workflow.parameters.pull-secret}}"
          - name: OPENSHIFT_VERSION
            value: "{{workflow.parameters.openshift-version}}"
          - name: MASTER_NODE_COUNT
            value: "{{workflow.parameters.master-node-count}}"
          - name: WORKER_NODE_COUNT
            value: "{{workflow.parameters.worker-node-count}}"
          - name: REGION
            value: "{{workflow.parameters.region}}"
      outputs:
        artifacts:
          - name: kubeconfig
            path: /data/auth/kubeconfig
            archive:
              none: {}
          - name: kubeadmin-password
            path: /data/auth/kubeadmin-password
            archive:
              none: {}
          - name: url
            path: /data/url
            archive:
              none: {}
          - name: SSH_ACCESS
            path: /data/SSH_ACCESS.md
            archive:
              none: {}
          - name: data
            path: /data
            archive:
              tar: {}

    - name: gen-creds
      container:
        image: rnix/openssl-gost
        imagePullPolicy: Always
        command: [sh, -c,
          'openssl rand -base64 32 | tr "+/" "_#"  | cut -c 1-20 > /data/stackrox-admin-password']
        volumeMounts:
          - name: data
            mountPath: /data
      outputs:
        artifacts:
          - name: stackrox-admin-password
            path: /data/stackrox-admin-password
            archive:
              none: {}

    - name: run-ansible-demo
      inputs:
        artifacts:
#          - name: kubeconfig
#            path: /tmp/kubeconfig
          - name: mypassword
            path: /tmp/stackrox-admin-password
      container:
        image: us.gcr.io/rox-se/ansible-demo:latest
        imagePullPolicy: Always
        env:
          - name: ADMIN_PASSWORD
            value: "TODO(sbostick)"
          - name: KUBECONFIG_BASE64
            value: "TODO(sbostick)"
          - name: CENTRAL_PORT
            value: 443
          - name: DOCKERCONFIG_BASE64
            value:
          - name: ORCHESTRATOR
            value: "openshift"
          - name: STACKROX_LICENSE
            valueFrom:
              secretKeyRef:
                name: demo-secrets
                key: STACKROX_LICENSE
          - name: IMAGE_PULL_USER
            valueFrom:
              secretKeyRef:
                name: demo-secrets
                key: STACKROX_IO_PASSWORD
          - name: IMAGE_PULL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: demo-secrets
                key: STACKROX_IO_USERNAME
          - name: GOOGLE_CREDENTIALS
            valueFrom:
              secretKeyRef:
                name: google-credentials-openshift-4
                key: google-credentials.json
        command: [sh, -c, '
          # ADMIN_PASSWORD=$(cat /tmp/stackrox-admin-password);
          # KUBECONFIG_BASE64=$(cat /tmp/kubeconfig | base64);

          echo "ADMIN_PASSWORD      => $ADMIN_PASSWORD";
          echo "CENTRAL_PORT        => $CENTRAL_PORT";
          echo "DOCKERCONFIG_BASE64 => $DOCKERCONFIG_BASE64";
          echo "GOOGLE_CREDENTIALS  => $GOOGLE_CREDENTIALS";
          echo "IMAGE_PULL_PASSWORD => $IMAGE_PULL_PASSWORD";
          echo "IMAGE_PULL_USER     => $IMAGE_PULL_USER";
          echo "KUBECONFIG_BASE64   => $KUBECONFIG_BASE64";
          echo "ORCHESTRATOR        => $ORCHESTRATOR";
          echo "STACKROX_LICENSE    => $STACKROX_LICENSE";

          ansible-playbook --version;
        ']
        volumeMounts:
          - name: data
            mountPath: /data

    #- name: wait
    #suspend: {}

    - name: destroy
      container:
        image: gcr.io/stackrox-infra/automation-flavors/openshift-4:0.2.7-7-ge8956a2f69-snapshot
        imagePullPolicy: Always
        args:
          - destroy
        env:
          - name: GOOGLE_CREDENTIALS
            valueFrom:
              secretKeyRef:
                name: google-credentials-openshift-4
                key: google-credentials.json
        volumeMounts:
          - name: data
            mountPath: /data
