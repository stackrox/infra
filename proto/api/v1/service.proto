syntax = "proto3";

option go_package = "v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package v1;

message Version {
    google.protobuf.Timestamp BuildDate         = 1;
    string GitCommit     = 2;
    string GoVersion     = 3;
    string Platform      = 4;
    string Version       = 5;
    string Workflow      = 6;
}

service VersionService {

    rpc GetVersion (google.protobuf.Empty) returns (Version) {
        option (google.api.http) = {
            get: "/v1/version"
        };
    }

}

// WhoamiResponse represents details about the current authenticated principal.
message WhoamiResponse {
    // Principal represents a possible type of authenticated principal.
    oneof principal {
        // User represents an authenticated human.
        User User = 1;

        // ServiceAccount represents an authenticated service account robot.
        ServiceAccount ServiceAccount = 2;
    }
}

// User represents an authenticated (human) principal.
message User {
    // Expiry is the expiration date of this user session. Used only as a hint
    // to the user and not for enforcement.
    google.protobuf.Timestamp Expiry         = 1;

    // Name is the full name of the user.
    string Name = 2;

    // Email is the email address of the user.
    string Email = 3;

    // Picture is a URL linking to this user's profile picture, if available.
    string Picture = 4;
}

// ServiceAccount represents an authenticated service account (robot) principal.
message ServiceAccount {
    // Name is a human readable name for the service account.
    string Name = 1;

    // Description is a human readable description for the service account.
    string Description = 2;
}

service UserService {
    // Whoami provides information about the currently authenticated principal.
    rpc Whoami (google.protobuf.Empty) returns (WhoamiResponse) {
        option (google.api.http) = {
            get: "/v1/whoami"
        };
    }

}

// Flavor represents a configured cluster flavor.
message Flavor {
    // ID is the unique, human type-able, ID for the flavor.
    string ID = 1;

    // Name is a human readable name for the flavor.
    string Name = 2;

    // Description is a human readable description for the flavor.
    string Description = 3;

    // availability represents the availability classification levels.
    enum availability {
        // alpha is completely experemental, and is not expected to work in any way.
        alpha = 0;

        // beta is being tested, and is expected to work with minor issues.
        beta = 1;

        // stable is available for public consumption, and works without issue.
        stable = 2;

        // default is stable, and available for customer demo consumption.
        // Exactly 1 flavor should be configured as default.
        default = 3;
    }

    // Description is an availability classification for the flavor.
    availability Availability = 4;
}

// FlavorsResponse represents details about the available cluster flavors.
message FlavorsResponse {
    // Default is the flavor ID of the default cluster flavor.
    string Default = 1;

    // Flavors is a list of all available cluster flavors.
    repeated Flavor Flavors = 2;
}

// ClusterService provides cluster based functionality.
service ClusterService {
    // Flavors provides information about the available cluster flavors.
    rpc Flavors (google.protobuf.Empty) returns (FlavorsResponse) {
        option (google.api.http) = {
            get: "/v1/cluster/flavors"
        };
    }

}
