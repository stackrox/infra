syntax = "proto3";

option go_package = "v1";

import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package v1;

// ResourceByID represents a generic reference to a named/unique resource.
message ResourceByID {
    string id = 1;
}

message Version {
    google.protobuf.Timestamp BuildDate         = 1;
    string GitCommit     = 2;
    string GoVersion     = 3;
    string Platform      = 4;
    string Version       = 5;
    string Workflow      = 6;
}

service VersionService {

    rpc GetVersion (google.protobuf.Empty) returns (Version) {
        option (google.api.http) = {
            get: "/v1/version"
        };
    }

}

// WhoamiResponse represents details about the current authenticated principal.
message WhoamiResponse {
    // Principal represents a possible type of authenticated principal.
    oneof principal {
        // User represents an authenticated human.
        User User = 1;

        // ServiceAccount represents an authenticated service account robot.
        ServiceAccount ServiceAccount = 2;
    }
}

// User represents an authenticated (human) principal.
message User {
    // Expiry is the expiration date of this user session. Used only as a hint
    // to the user and not for enforcement.
    google.protobuf.Timestamp Expiry         = 1;

    // Name is the full name of the user.
    string Name = 2;

    // Email is the email address of the user.
    string Email = 3;

    // Picture is a URL linking to this user's profile picture, if available.
    string Picture = 4;
}

// ServiceAccount represents an authenticated service account (robot) principal.
message ServiceAccount {
    // Name is a human readable name for the service account.
    string Name = 1;

    // Description is a human readable description for the service account.
    string Description = 2;

    // Email is the StackRox email address for the service account.
    string Email = 3;
}


message TokenResponse {
    // Account is the service account the token was generated for.
    ServiceAccount Account = 1;

    // Token is the token generated for the service account.
    string Token = 2;
}

service UserService {
    // Whoami provides information about the currently authenticated principal.
    rpc Whoami (google.protobuf.Empty) returns (WhoamiResponse) {
        option (google.api.http) = {
            get: "/v1/whoami"
        };
    }

    // Token generates an arbitrary service account token
    rpc Token (ServiceAccount) returns (TokenResponse) {
        option (google.api.http) = {
            post: "/v1/token"
            body: "*"
        };
    }

}

// Parameter represents a single parameter that is needed to launch a flavor.
message Parameter {
    // Name is the unique name of the parameter.
    string Name = 1;

    // Description is a human readable description for the parameter.
    string Description = 2;

    // Example is an arbitrary hint for a valid parameter value.
    string Example = 3;
}

// Flavor represents a configured cluster flavor.
message Flavor {
    // ID is the unique, human type-able, ID for the flavor.
    string ID = 1;

    // Name is a human readable name for the flavor.
    string Name = 2;

    // Description is a human readable description for the flavor.
    string Description = 3;

    // availability represents the availability classification levels.
    enum availability {
        // alpha is completely experemental, and is not expected to work in any way.
        alpha = 0;

        // beta is being tested, and is expected to work with minor issues.
        beta = 1;

        // stable is available for public consumption, and works without issue.
        stable = 2;

        // default is stable, and available for customer demo consumption.
        // Exactly 1 flavor should be configured as default.
        default = 3;
    }

    // Description is an availability classification for the flavor.
    availability Availability = 4;

    // Parameters is a map of parameters required for launching this flavor.
    map<string, Parameter> Parameters = 5;
}

// FlavorListResponse represents details about the available cluster flavors.
message FlavorListResponse {
    // Default is the flavor ID of the default cluster flavor.
    string Default = 1;

    // Flavors is a list of all available cluster flavors.
    repeated Flavor Flavors = 2;
}

// FlavorService provides flavor based functionality.
service FlavorService {
    // List provides information about the available flavors.
    rpc List (google.protobuf.Empty) returns (FlavorListResponse) {
        option (google.api.http) = {
            get: "/v1/flavor"
        };
    }

    // Info provides information about a specific flavor.
    rpc Info (ResourceByID) returns (Flavor) {
        option (google.api.http) = {
            get: "/v1/flavor/{id}"
        };
    }

}

// Status represents the various cluster states.
enum Status {
    // FAILED is the state when the cluster has failed in one way or another.
    FAILED = 0;

    // CREATING is the state when the cluster is being created.
    CREATING = 1;

    // READY is the state when the cluster is available and ready for use.
    READY = 2;

    // DESTROYING is the state when the cluster is being destroyed.
    DESTROYING = 3;

    // FINISHED is the state when the cluster has been successfully destroyed.
    FINISHED = 4;
}

// Cluster represents a single cluster.
message Cluster {
    // ID is the unique ID for the cluster.
    string ID = 1;

    // Status is the current status for the cluster.
    Status Status = 2;

    // Flavor is the original flavor ID that launched this cluster.
    string Flavor = 3;

    // Owner is the email address for the cluster owner.
    string Owner = 4;

    // CreatedOn is the timestamp on which the cluster started being created.
    google.protobuf.Timestamp CreatedOn         = 5;

    // DestroyedOn is the timestamp on which the cluster finished being
    // destroyed.
    google.protobuf.Timestamp DestroyedOn         = 6;

    // Lifespan is the duration for which the cluster should be kept alive.
    google.protobuf.Duration Lifespan = 7;
}

// ClusterListResponse represents details about all clusters.
message ClusterListResponse {
    // Clusters is a list of all clusters.
    repeated Cluster Clusters = 1;
}

message LifespanRequest {
    // ID is the unique ID for the cluster.
    string id = 1;

    // Lifespan is the new lifespan.
    google.protobuf.Duration Lifespan = 2;
}

// CreateClusterRequest represents details for launching a new cluster.
message CreateClusterRequest {
    // ID is the flavor ID to launch.
    string ID = 1;

    // Lifespan is the initial cluster lifespan.
    google.protobuf.Duration Lifespan = 2;

    // Parameters is a map of launch parameter names to values.
    map<string, string> Parameters = 3;
}

message Artifact {
    string Name = 1;

    string Description = 2;

    string URL = 3;
}

message ClusterArtifacts {
    repeated Artifact Artifacts = 1;
}

// FlavorService provides flavor based functionality.
service ClusterService {
    // Info provides information about a specific cluster.
    rpc Info (ResourceByID) returns (Cluster) {
        option (google.api.http) = {
            get: "/v1/cluster/{id}"
        };
    }

    // List provides information about the available clusters.
    rpc List (google.protobuf.Empty) returns (ClusterListResponse) {
        option (google.api.http) = {
            get: "/v1/cluster"
        };
    }

    // Lifespan updates the lifespan for a specific cluster.
    rpc Lifespan (LifespanRequest) returns (google.protobuf.Duration) {
        option (google.api.http) = {
            post: "/v1/cluster/{id}/lifespan"
            body: "*"
        };
    }

    // Create launches a new cluster.
    rpc Create (CreateClusterRequest) returns (ResourceByID) {
        option (google.api.http) = {
            post: "/v1/cluster"
            body: "*"
        };
    }

    rpc Artifacts (ResourceByID) returns (ClusterArtifacts) {
        option (google.api.http) = {
            get: "/v1/cluster/{id}/artifacts"
        };
    }
}
